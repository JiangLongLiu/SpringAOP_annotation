1.Spring AOP

1).加入jar包
aopalliance-1.0.jar
aspectjweaver-1.8.6.jar
spring-aop-4.1.6.RELEASE.jar
spring-aspects-4.1.6.RELEASE.jar

commons-logging-1.2.jar
spring-beans-4.1.6.RELEASE.jar
spring-context-4.1.6.RELEASE.jar
spring-core-4.1.6.RELEASE.jar
spring-expression-4.1.6.RELEASE.jar


2).在配置文件中加入AOP的命名空间 bean aop  context


3).基于注解的方式
	①.在配置文件中加入如下配置
		<aop:aspectj-autoproxy/>
	②.把横切关注点的代码抽象到切面的类中.
		i.切面首先是一个IOC容器中的bean，即加入@Component注解
		ii. 切面需要加入@Aspect注解

	③.在类中声明各种通知：
		@Before 前置通知，在方法执行前执行
		@After 后置通知，在方法执行后执行
		@AfterRunning 返回通知，在方法返回结果之后执行
		@AfterThrowing 异常通知，在方法抛出异常之后
		@Around 环绕通知，围绕着方法执行
		execution("")
	④.可以在通知方法中声明一个类型为JoinPoint的参数，然后就能访问连接细节，如方法名和参数值
		@Before("execution(int com.wiseq.aop.impl.ArthmeticCalculatorImpl.*(int , int ))")
		public void beforeMethod(JoinPoint joinPoint){
			String methodName = joinPoint.getSignature().getName();
			System.out.println("The Method "+methodName+" begins ");
		}